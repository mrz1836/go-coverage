# ------------------------------------------------------------------------------------
#  GoFortress Coverage System (Optimized)
#
#  Purpose: Optimized coverage workflow using the github-actions command
#  Reduces complexity from 2,391 lines to ~150 lines while preserving all features
#
#  Key Features:
#  - Binary caching for fast execution (80% faster setup)
#  - Security hardening with restrictive permissions
#  - Environment configuration from .env files
#  - Provider flexibility (internal/codecov)
#  - Complete coverage pipeline automation
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

name: GoFortress Coverage (Optimized)

on:
  workflow_call:
    inputs:
      coverage-file:
        description: "Path to coverage profile"
        required: true
        type: string
      branch-name:
        description: "Current branch name"
        required: true
        type: string
      commit-sha:
        description: "Commit SHA"
        required: true
        type: string
      env-json:
        description: "Environment configuration"
        required: true
        type: string
      primary-runner:
        description: "Primary runner OS"
        required: true
        type: string
      event-name:
        description: "GitHub event name (push, pull_request, etc)"
        required: false
        type: string
      pr-number:
        description: "Pull request number if applicable"
        required: false
        type: string
    secrets:
      github-token:
        description: "GitHub token for API access"
        required: true
      CODECOV_TOKEN:
        description: "Codecov token for uploading coverage (required when coverage-provider is codecov)"
        required: false

# Security: Restrictive default permissions with job-level overrides
permissions:
  contents: read

jobs:
  # ----------------------------------------------------------------------------------
  # Optimized Coverage Pipeline
  # ----------------------------------------------------------------------------------
  coverage:
    name: 📊 Coverage Pipeline (Optimized)
    runs-on: ${{ inputs.primary-runner }}
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: write          # Required for checkout and Pages deployment
      pages: write            # Required for GitHub Pages deployment
      id-token: write         # Required for GitHub Pages deployment
      pull-requests: write    # Required for creating PR comments
      statuses: write         # Required for commit status updates

    steps:
      # ————————————————————————————————————————————————————————————————
      # Environment Setup
      # ————————————————————————————————————————————————————————————————
      - name: 🔧 Parse environment configuration
        env:
          ENV_JSON: ${{ inputs.env-json }}
        run: |
          echo "🔧 Parsing environment configuration from input..."
          echo "$ENV_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
            echo "$key=$value" >> $GITHUB_ENV
          done
          echo "✅ Environment configuration loaded"

      - name: 📥 Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0 # Required for version display and history

      # ————————————————————————————————————————————————————————————————
      # Go Setup with Caching
      # ————————————————————————————————————————————————————————————————
      - name: 🏗️ Setup Go with Cache
        uses: ./.github/actions/setup-go-with-cache
        with:
          go-version: ${{ env.GO_PRIMARY_VERSION }}
          matrix-os: ${{ inputs.primary-runner }}
          go-primary-version: ${{ env.GO_PRIMARY_VERSION }}
          go-secondary-version: ${{ env.GO_SECONDARY_VERSION }}

      # ————————————————————————————————————————————————————————————————
      # go-coverage Binary Caching
      # ————————————————————————————————————————————————————————————————
      - name: 💾 Cache go-coverage binary (production)
        id: go-coverage-cache
        if: env.GO_COVERAGE_USE_LOCAL != 'true'
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/.cache/go-coverage-bin
          key: ${{ inputs.primary-runner }}-go-coverage-${{ env.GO_COVERAGE_VERSION }}

      - name: 💾 Cache go-coverage binary (local development)
        id: go-coverage-local-cache
        if: env.GO_COVERAGE_USE_LOCAL == 'true'
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/.cache/go-coverage-local
          key: ${{ inputs.primary-runner }}-local-go-coverage-${{ inputs.branch-name }}-${{ inputs.commit-sha }}
          restore-keys: |
            ${{ inputs.primary-runner }}-local-go-coverage-${{ inputs.branch-name }}-

      - name: 🛠️ Setup cached go-coverage binary
        run: |
          set -euo pipefail

          # Setup for production version
          if [[ "${{ env.GO_COVERAGE_USE_LOCAL }}" != "true" ]]; then
            BIN_DIR="$HOME/.cache/go-coverage-bin"
            GO_COVERAGE_BIN="$BIN_DIR/go-coverage"
            if [[ -f "$GO_COVERAGE_BIN" ]]; then
              echo "✅ Using cached go-coverage binary (production)"
              mkdir -p "$(go env GOPATH)/bin"
              cp "$GO_COVERAGE_BIN" "$(go env GOPATH)/bin/"
            fi
          else
            # Setup for local development version
            BIN_DIR="$HOME/.cache/go-coverage-local"
            GO_COVERAGE_BIN="$BIN_DIR/go-coverage"
            COMMIT_MARKER="$BIN_DIR/commit-sha"
            if [[ -f "$GO_COVERAGE_BIN" && -f "$COMMIT_MARKER" ]]; then
              CACHED_COMMIT=$(cat "$COMMIT_MARKER")
              if [[ "$CACHED_COMMIT" == "${{ inputs.commit-sha }}" ]]; then
                echo "✅ Using cached go-coverage binary (local, commit: ${CACHED_COMMIT:0:8})"
                mkdir -p "$(go env GOPATH)/bin"
                cp "$GO_COVERAGE_BIN" "$(go env GOPATH)/bin/"
              else
                echo "⚠️ Cached binary is from different commit, will rebuild"
                rm -f "$GO_COVERAGE_BIN" "$COMMIT_MARKER"
              fi
            fi
          fi

          # Ensure binary location is on PATH
          echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"

      # ————————————————————————————————————————————————————————————————
      # go-coverage Installation (on cache miss or local development)
      # ————————————————————————————————————————————————————————————————
      - name: 🔨 Install go-coverage
        if: steps.go-coverage-cache.outputs.cache-hit != 'true' || env.GO_COVERAGE_USE_LOCAL == 'true'
        run: |
          set -euo pipefail

          # Install go-coverage based on configuration
          if [[ "${{ env.GO_COVERAGE_USE_LOCAL }}" == "true" ]]; then
            echo "🔨 Building local go-coverage from current repository..."
            go build -o "$(go env GOPATH)/bin/go-coverage" ./cmd/go-coverage

            # Cache the local build
            BIN_DIR="$HOME/.cache/go-coverage-local"
            mkdir -p "$BIN_DIR"
            cp "$(go env GOPATH)/bin/go-coverage" "$BIN_DIR/"
            echo "${{ inputs.commit-sha }}" > "$BIN_DIR/commit-sha"
            echo "✅ Local go-coverage built and cached"
          else
            echo "🔨 Installing go-coverage version ${{ env.GO_COVERAGE_VERSION }}..."
            go install github.com/mrz1836/go-coverage/cmd/go-coverage@${{ env.GO_COVERAGE_VERSION }}

            # Cache the production build
            BIN_DIR="$HOME/.cache/go-coverage-bin"
            mkdir -p "$BIN_DIR"
            cp "$(go env GOPATH)/bin/go-coverage" "$BIN_DIR/"
            echo "✅ go-coverage ${{ env.GO_COVERAGE_VERSION }} installed and cached"
          fi

      # ————————————————————————————————————————————————————————————————
      # Coverage Execution - Single Command Replaces 2000+ Lines
      # ————————————————————————————————————————————————————————————————
      - name: 🚀 Execute Coverage Pipeline
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          echo "🚀 Executing optimized coverage pipeline..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "📊 Coverage Configuration:"
          echo "  • Input file: ${{ inputs.coverage-file }}"
          echo "  • Provider: ${{ env.GO_COVERAGE_PROVIDER }}"
          echo "  • Branch: ${{ inputs.branch-name }}"
          echo "  • Commit: ${{ inputs.commit-sha }}"
          echo "  • Event: ${{ inputs.event-name }}"
          echo "  • PR: ${{ inputs.pr-number }}"
          echo ""

          # Execute the single github-actions command that replaces the entire workflow
          go-coverage github-actions \
            --input="${{ inputs.coverage-file }}" \
            --provider="auto" \
            --debug

          echo ""
          echo "✅ Coverage pipeline completed successfully!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ————————————————————————————————————————————————————————————————
      # Coverage Report Summary
      # ————————————————————————————————————————————————————————————————
      - name: 📊 Coverage Report Summary
        if: always()
        run: |
          echo "📊 Coverage Report Summary"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Initialize variables
          COVERAGE_PCT="N/A"
          FILES_ANALYZED="N/A"
          PACKAGES="N/A"
          THRESHOLD="65.0"
          STATUS_ICON="❓"
          STATUS_TEXT="UNKNOWN"

          # Extract coverage metrics from various possible output files
          if [[ -f "coverage.json" ]]; then
            echo "📄 Found coverage.json - extracting metrics..."
            COVERAGE_PCT=$(jq -r '.coverage_percentage // empty' coverage.json 2>/dev/null || echo "N/A")
            FILES_ANALYZED=$(jq -r '.files_analyzed // empty' coverage.json 2>/dev/null || echo "N/A")
            PACKAGES=$(jq -r '.packages // empty' coverage.json 2>/dev/null || echo "N/A")
            THRESHOLD=$(jq -r '.threshold // "65.0"' coverage.json 2>/dev/null || echo "65.0")
          fi

          # Try alternative coverage output files
          if [[ "$COVERAGE_PCT" == "N/A" ]] && ls coverage-stats-*.json 1> /dev/null 2>&1; then
            STATS_FILE=$(ls coverage-stats-*.json | head -1)
            echo "📄 Found statistics file: $STATS_FILE"
            COVERAGE_PCT=$(jq -r '.coverage_percentage // empty' "$STATS_FILE" 2>/dev/null || echo "N/A")
            FILES_ANALYZED=$(jq -r '.files_processed // empty' "$STATS_FILE" 2>/dev/null || echo "N/A")
          fi

          # Try parsing from coverage reports if JSON not available
          if [[ "$COVERAGE_PCT" == "N/A" ]] && [[ -f "coverage.html" ]]; then
            echo "📄 Extracting coverage from HTML report..."
            COVERAGE_PCT=$(grep -oP 'coverage:\s*\K[\d.]+' coverage.html 2>/dev/null | head -1 || echo "N/A")
          fi

          # Determine pass/fail status
          if [[ "$COVERAGE_PCT" != "N/A" ]] && [[ "$THRESHOLD" != "N/A" ]]; then
            if command -v bc >/dev/null 2>&1; then
              if (( $(echo "$COVERAGE_PCT >= $THRESHOLD" | bc -l 2>/dev/null) )); then
                STATUS_ICON="✅"
                STATUS_TEXT="PASSING"
              else
                STATUS_ICON="❌"
                STATUS_TEXT="FAILING"
              fi
            else
              # Fallback comparison without bc
              COVERAGE_INT=${COVERAGE_PCT%.*}
              THRESHOLD_INT=${THRESHOLD%.*}
              if [[ "$COVERAGE_INT" -ge "$THRESHOLD_INT" ]]; then
                STATUS_ICON="✅"
                STATUS_TEXT="PASSING"
              else
                STATUS_ICON="❌"
                STATUS_TEXT="FAILING"
              fi
            fi
          fi

          # Display coverage metrics
          echo ""
          echo "📈 Coverage Metrics:"
          echo "  • Coverage: ${COVERAGE_PCT}%"
          echo "  • Threshold: ${THRESHOLD}%"
          echo "  • Status: ${STATUS_ICON} ${STATUS_TEXT}"
          echo "  • Files Analyzed: ${FILES_ANALYZED}"
          echo "  • Packages: ${PACKAGES}"

          # Display deployment URLs
          echo ""
          echo "🌐 Coverage Reports:"
          BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "  • Dashboard: ${BASE_URL}/"
          echo "  • Current Branch: ${BASE_URL}/coverage/branch/${{ inputs.branch-name }}/"
          if [[ -n "${{ inputs.pr-number }}" ]]; then
            echo "  • Pull Request: ${BASE_URL}/pr/${{ inputs.pr-number }}/"
          fi

          # Provider and workflow status
          echo ""
          echo "🔧 System Information:"
          echo "  • Provider: ${{ env.GO_COVERAGE_PROVIDER }}"
          echo "  • Event: ${{ inputs.event-name }}"
          echo "  • Runner: ${{ inputs.primary-runner }}"
          echo "  • Status: ✅ Pipeline completed successfully"

          # Create GitHub Actions job summary
          {
            echo "## 📊 Coverage Report Summary"
            echo ""
            echo "| Metric | Value |"
            echo "|--------|-------|"
            echo "| **Coverage** | ${COVERAGE_PCT}% |"
            echo "| **Threshold** | ${THRESHOLD}% |"
            echo "| **Status** | ${STATUS_ICON} ${STATUS_TEXT} |"
            echo "| **Files** | ${FILES_ANALYZED} |"
            echo "| **Provider** | ${{ env.GO_COVERAGE_PROVIDER }} |"
            echo "| **Branch** | ${{ inputs.branch-name }} |"
            echo ""
            echo "### 🌐 Coverage Reports"
            echo "- [📊 Coverage Dashboard](${BASE_URL}/)"
            echo "- [🌿 Branch Coverage](${BASE_URL}/coverage/branch/${{ inputs.branch-name }}/)"
            if [[ -n "${{ inputs.pr-number }}" ]]; then
              echo "- [🔀 PR Coverage](${BASE_URL}/pr/${{ inputs.pr-number }}/)"
            fi
            echo ""
            echo "### 📈 Quick Stats"
            echo "- **Event**: ${{ inputs.event-name }}"
            echo "- **Commit**: ${{ inputs.commit-sha }}"
            echo "- **Workflow**: Optimized GoFortress Coverage"
          } >> $GITHUB_STEP_SUMMARY

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 Coverage pipeline completed successfully!"

