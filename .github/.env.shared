# ------------------------------------------------------------------------------------
#  Shared Environment Variables for CI/CD Workflows
#
#  Purpose: Centralized configuration for all GitHub Actions workflows.
#  This file contains static environment variables used across multiple workflows.
#
#  Maintainer: @mrz1836
#
# ------------------------------------------------------------------------------------

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Custom Project Variables
# ───────────────────────────────────────────────────────────────────────────────
CUSTOM_VAR=false             # Add your own custom variables here for use in workflows

# ───────────────────────────────────────────────────────────────────────────────
# ENV: GitHub Token Configuration
# ───────────────────────────────────────────────────────────────────────────────
# Use 'GH_PAT_TOKEN' for private repos or higher API rate limits (5000/hour).
# The default fallback is 'GITHUB_TOKEN' (rate-limited to 1000/hour).
PREFERRED_GITHUB_TOKEN=GH_PAT_TOKEN    # Change this per project as needed

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Go Version Matrix
# ───────────────────────────────────────────────────────────────────────────────
# If you set both primary and secondary versions to the same value, the workflow will only run once for that version.
GO_PRIMARY_VERSION=1.24.x              # Main Go version used by primary jobs and runners
GO_SECONDARY_VERSION=1.24.x            # Additional version for compatibility testing (or if the go.mod version != GO_PRIMARY_VERSION)

# ───────────────────────────────────────────────────────────────────────────────
# ENV: OS and Runner Configuration
# ───────────────────────────────────────────────────────────────────────────────
# This can only be Linux or Mac (there is no support for Windows at this time).
# Careful using Mac, it's expensive! See: https://docs.github.com/en/billing/managing-billing-for-your-products/about-billing-for-github-actions#minute-multipliers
PRIMARY_RUNNER=ubuntu-24.04            # This is the primary runner and also used for jobs that require Linux (options are: ubuntu-24.04, ubuntu-22.04, macos-15)
SECONDARY_RUNNER=ubuntu-24.04          # Set identical to PRIMARY_RUNNER if you want a single test runner (options are: ubuntu-24.04, ubuntu-22.04, macos-15)

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Feature Flags
# ───────────────────────────────────────────────────────────────────────────────
ENABLE_BENCHMARKS=true                 # Enable benchmark tests (runs make bench) (this needs more work before it can be enabled)
ENABLE_CODE_COVERAGE=true              # Enable code coverage reporting
ENABLE_FUZZ_TESTING=true               # Enable fuzz running tests (requires Go 1.18+)
ENABLE_GO_LINT=true                    # Enable Go code linting steps (golangci-lint)
ENABLE_RACE_DETECTION=true             # Enable Go's race detector in tests (-race flag)
ENABLE_SECURITY_SCAN_NANCY=true        # Enable Nancy dependency vulnerability checks
ENABLE_SECURITY_SCAN_GOVULNCHECK=true  # Enable govulncheck Go vulnerability scanning (Issue with https://pkg.go.dev/vuln/GO-2024-3218)
ENABLE_SECURITY_SCAN_GITLEAKS=true     # Enable Gitleaks secret scanning
ENABLE_STATIC_ANALYSIS=true            # Enable static analysis jobs (go vet)
ENABLE_VERBOSE_TEST_OUTPUT=false       # Enable verbose output for test runs (can slow down CI)
ENABLE_YAML_LINT=true                  # Enable YAML format validation (prettier with editorconfig)
MAKEFILE_REQUIRED=true                 # Enforce the presence of Makefile for builds (future feature)

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Tool Versions & Config
# ───────────────────────────────────────────────────────────────────────────────
GITLEAKS_NOTIFY_USER_LIST=@mrz1836                # User(s) to notify when gitleaks secrets are found (user,user2)
GITLEAKS_VERSION=8.27.2                           # Version of gitleaks to install and use (X.Y.Z) (https://github.com/gitleaks/gitleaks)
GORELEASER_VERSION=v2.11.0                        # Version of goreleaser to install and use (vX.Y.Z) (https://github.com/goreleaser/goreleaser)
GOVULNCHECK_VERSION=v1.1.4                        # Version of govulncheck to use for Go vuln scanning (vX.Y.Z) (https://pkg.go.dev/golang.org/x/vuln)
NANCY_EXCLUDES=CVE-2024-38513,CVE-2022-21698,CVE-2023-45142  # Known acceptable CVEs (cve,cve2,...)
NANCY_VERSION=v1.0.51                             # Version of nancy to install and use (vX.Y.Z) (https://github.com/sonatype-nexus-community/nancy)
NODE_VERSION=20                                   # Node.js version for prettier and other tools (major version)
PRETTIER_VERSION=3.6.2                            # Version of prettier to use for YAML validation (X.Y.Z) (https://www.npmjs.com/package/prettier)

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Stale Workflow Configuration
# ───────────────────────────────────────────────────────────────────────────────
STALE_DAYS_BEFORE_STALE=60                        # Days of inactivity before marking as stale
STALE_DAYS_BEFORE_CLOSE=14                        # Additional days before closing stale items
STALE_LABEL=stale                                 # Label to apply to stale items
STALE_EXEMPT_ISSUE_LABELS=work-in-progress,security,requires-manual-review    # Issues with these labels won't go stale
STALE_EXEMPT_PR_LABELS=work-in-progress,security,requires-manual-review       # PRs with these labels won't go stale
STALE_OPERATIONS_PER_RUN=300                      # Maximum API operations per workflow run

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Sync Labels Workflow Configuration
# ───────────────────────────────────────────────────────────────────────────────
SYNC_LABELS_FILE=.github/labels.yml    # Path to the labels manifest file

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Dependabot Auto-merge Workflow Configuration
# ───────────────────────────────────────────────────────────────────────────────
DEPENDABOT_MAINTAINER_USERNAME=mrz1836                           # Username to notify for manual reviews
DEPENDABOT_AUTO_MERGE_PATCH=true                                 # Auto-merge patch updates
DEPENDABOT_AUTO_MERGE_MINOR_DEV=true                             # Auto-merge minor updates for dev dependencies
DEPENDABOT_AUTO_MERGE_MINOR_PROD=true                            # Auto-merge minor updates for prod dependencies
DEPENDABOT_AUTO_MERGE_SECURITY_NON_MAJOR=true                    # Auto-merge security updates (except major)
DEPENDABOT_ALERT_ON_MAJOR=true                                   # Alert maintainer on major updates
DEPENDABOT_ALERT_ON_MINOR_PROD=true                              # Alert maintainer on minor prod updates
DEPENDABOT_MANUAL_REVIEW_LABEL=requires-manual-review            # Label for PRs requiring manual review
DEPENDABOT_AUTO_MERGE_LABELS=automerge,dependabot                # Labels for auto-merged PRs (comma-separated)

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Auto-merge on Approval Workflow Configuration
# ───────────────────────────────────────────────────────────────────────────────
AUTO_MERGE_MIN_APPROVALS=1                                       # Minimum approvals required for auto-merge
AUTO_MERGE_REQUIRE_ALL_REQUESTED_REVIEWS=true                    # Require all requested reviews to be completed
AUTO_MERGE_ALLOWED_MERGE_TYPES=squash                            # Allowed merge types (squash,merge,rebase) comma-separated
AUTO_MERGE_DELETE_BRANCH=true                                    # Delete branch after merge
AUTO_MERGE_SKIP_DRAFT=true                                       # Skip draft PRs
AUTO_MERGE_SKIP_WIP=true                                         # Skip WIP PRs (title or label)
AUTO_MERGE_WIP_LABELS=work-in-progress,wip,do-not-merge          # Labels that indicate WIP (comma-separated)
AUTO_MERGE_COMMENT_ON_ENABLE=true                                # Comment when auto-merge is enabled
AUTO_MERGE_COMMENT_ON_DISABLE=true                               # Comment when auto-merge is disabled
AUTO_MERGE_LABELS_TO_ADD=auto-merge-enabled                      # Labels to add when auto-merge is enabled
AUTO_MERGE_SKIP_BOT_PRS=true                                     # Skip bot PRs (they have separate workflows)

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Pull Request Management Workflow Configuration
# ───────────────────────────────────────────────────────────────────────────────
PR_MANAGEMENT_DEFAULT_ASSIGNEE=mrz1836                           # Default assignee for PRs without one
PR_MANAGEMENT_SKIP_BOT_USERS=dependabot[bot],mergify[bot],copilot[bot]  # Bot users to skip (comma-separated)
PR_MANAGEMENT_WELCOME_FIRST_TIME=true                            # Welcome first-time contributors
PR_MANAGEMENT_APPLY_SIZE_LABELS=true                             # Apply size labels (XS, S, M, L, XL)
PR_MANAGEMENT_APPLY_TYPE_LABELS=true                             # Apply type labels based on branch/title
PR_MANAGEMENT_CLEAN_CACHE_ON_CLOSE=true                          # Clean runner cache when PR closes
PR_MANAGEMENT_DELETE_BRANCH_ON_MERGE=true                        # Delete source branch after merge
PR_MANAGEMENT_PROTECTED_BRANCHES=master,main,development         # Branches that should never be deleted
PR_MANAGEMENT_SIZE_XS_THRESHOLD=10                               # Max changes for XS size label
PR_MANAGEMENT_SIZE_S_THRESHOLD=50                                # Max changes for S size label
PR_MANAGEMENT_SIZE_M_THRESHOLD=200                               # Max changes for M size label
PR_MANAGEMENT_SIZE_L_THRESHOLD=500                               # Max changes for L size label

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Go Coverage System Configuration
# ───────────────────────────────────────────────────────────────────────────────
ENABLE_GO_COVERAGE=true                         # Enable internal coverage system (replaces Codecov)
ENABLE_GO_COVERAGE_TESTS=true                   # Run coverage tool tests in CI

# Core Configuration (used in internal/config/config.go)
GO_COVERAGE_INPUT_FILE=coverage.txt             # Input coverage file path
GO_COVERAGE_OUTPUT_DIR=.github/coverage         # Output directory for generated files
GO_COVERAGE_THRESHOLD=80.0                      # Minimum coverage threshold
GO_COVERAGE_ALLOW_LABEL_OVERRIDE=false          # Allow threshold override via PR labels
GO_COVERAGE_MIN_OVERRIDE_THRESHOLD=50.0         # Minimum allowed override threshold
GO_COVERAGE_MAX_OVERRIDE_THRESHOLD=95.0         # Maximum allowed override threshold

# File/Path Exclusion Configuration
GO_COVERAGE_EXCLUDE_PATHS=test/,vendor/,testdata/  # Comma-separated paths to exclude
GO_COVERAGE_EXCLUDE_FILES=*_test.go,*.pb.go     # Comma-separated file patterns to exclude
GO_COVERAGE_EXCLUDE_TESTS=true                  # Exclude test files
GO_COVERAGE_EXCLUDE_GENERATED=true              # Exclude generated files

# GitHub Integration
GO_COVERAGE_POST_COMMENTS=true                  # Post PR comments
GO_COVERAGE_CREATE_STATUSES=true                # Create commit statuses

# Badge Configuration
GO_COVERAGE_BADGE_STYLE=flat                    # Badge style: flat, flat-square, for-the-badge
GO_COVERAGE_BADGE_LABEL=coverage                # Badge label text
GO_COVERAGE_BADGE_LOGO=                         # Badge logo: go, github, custom URL (empty for no logo)
GO_COVERAGE_BADGE_LOGO_COLOR=white              # Logo color
GO_COVERAGE_BADGE_OUTPUT=coverage.svg           # Badge output file
GO_COVERAGE_BADGE_TREND=false                   # Include trend in badge

# Report Configuration
GO_COVERAGE_REPORT_OUTPUT=coverage.html         # HTML report output file
GO_COVERAGE_REPORT_TITLE=Coverage Report        # HTML report title
GO_COVERAGE_REPORT_THEME=github-dark            # Report theme: github-light, github-dark, custom
GO_COVERAGE_REPORT_PACKAGES=true                # Show package breakdown
GO_COVERAGE_REPORT_FILES=true                   # Show file breakdown
GO_COVERAGE_REPORT_MISSING=true                 # Show missing lines
GO_COVERAGE_REPORT_RESPONSIVE=true              # Enable responsive design
GO_COVERAGE_REPORT_INTERACTIVE=true             # Include interactive features

# History Tracking
GO_COVERAGE_HISTORY_ENABLED=true                # Enable history tracking
GO_COVERAGE_HISTORY_PATH=.github/coverage/history  # Storage path for history files
GO_COVERAGE_HISTORY_RETENTION=90                # Number of days to retain history
GO_COVERAGE_HISTORY_MAX_ENTRIES=1000            # Maximum number of entries to keep
GO_COVERAGE_HISTORY_CLEANUP=true                # Enable automatic cleanup
GO_COVERAGE_HISTORY_METRICS=true                # Enable detailed metrics

# Storage Configuration
GO_COVERAGE_BASE_DIR=.github/coverage           # Base directory for all coverage files
GO_COVERAGE_AUTO_CREATE_DIRS=true               # Create directories automatically
GO_COVERAGE_FILE_MODE=644                       # File permissions for created files
GO_COVERAGE_DIR_MODE=755                        # Directory permissions for created directories

# Logging Configuration (used in internal/logger/logger.go)
GO_COVERAGE_LOG_LEVEL=INFO                      # Log level: DEBUG, INFO, WARN, ERROR
GO_COVERAGE_LOG_FORMAT=text                     # Log format: text, json
GO_COVERAGE_LOG_ENABLED=true                    # Enable logging

# ───────────────────────────────────────────────────────────────────────────────
# ENV: Google Analytics Configuration
# ───────────────────────────────────────────────────────────────────────────────
GOOGLE_ANALYTICS_ID=G-VKFVWG6GXM                # Google Analytics tracking ID for coverage dashboard/reports
