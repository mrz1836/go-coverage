package github

import (
	"fmt"
	"strings"
	"testing"
	"time"

	"github.com/mrz1836/go-coverage/internal/history"
)

func TestCommentTemplateGenerator_GenerateComment(t *testing.T) {
	config := DefaultCommentTemplateConfig()
	config.Repository = "owner/repo"
	generator := NewCommentTemplateGenerator(config)

	comparison := &CoverageComparison{
		PRCoverage: CoverageData{
			Percentage:        78.5,
			TotalStatements:   1000,
			CoveredStatements: 785,
			Branch:            "feature-branch",
		},
		BaseCoverage: CoverageData{
			Percentage:        75.0,
			TotalStatements:   900,
			CoveredStatements: 675,
			Branch:            "main",
		},
		Difference: 3.5,
		TrendAnalysis: TrendData{
			Direction:        "up",
			Magnitude:        "moderate",
			PercentageChange: 3.5,
		},
		FileChanges: []FileChange{
			{
				Filename:      "main.go",
				BaseCoverage:  70.0,
				PRCoverage:    80.0,
				Difference:    10.0,
				IsSignificant: true,
			},
		},
	}

	trendHistory := []history.CoverageRecord{
		{Percentage: 70.0, Timestamp: time.Now().Add(-3 * time.Hour)},
		{Percentage: 75.0, Timestamp: time.Now().Add(-2 * time.Hour)},
		{Percentage: 78.5, Timestamp: time.Now()},
	}

	deploymentURL := "https://owner.github.io/repo/coverage/"

	comment := generator.GenerateComment(comparison, trendHistory, deploymentURL)

	// Check for signature
	if !strings.Contains(comment, "[//]: # (go-coverage-v1)") {
		t.Error("expected comment to contain signature")
	}

	// Check for header
	if !strings.Contains(comment, "## üìä Coverage Report") {
		t.Error("expected comment to contain header")
	}

	// Check for current coverage
	if !strings.Contains(comment, "78.50%") {
		t.Error("expected comment to contain current coverage")
	}

	// Check for difference
	if !strings.Contains(comment, "+3.50%") {
		t.Error("expected comment to contain coverage difference")
	}

	// Check for status
	if !strings.Contains(comment, "PASSING") {
		t.Error("expected comment to contain passing status")
	}

	// Check for links
	if !strings.Contains(comment, deploymentURL) {
		t.Error("expected comment to contain deployment URL")
	}

	// Check for footer
	if !strings.Contains(comment, "Generated by Go Coverage") {
		t.Error("expected comment to contain footer")
	}
}

func TestCommentTemplateGenerator_GenerateHeader(t *testing.T) {
	tests := []struct {
		name             string
		comparison       *CoverageComparison
		target           float64
		expectedContains []string
	}{
		{
			name: "passing coverage",
			comparison: &CoverageComparison{
				PRCoverage: CoverageData{Percentage: 85.0},
				Difference: 3.0,
			},
			target: 70.0,
			expectedContains: []string{
				"85.00%",
				"(+3.00%)",
				"üìà",
				"‚úÖ",
				"PASSING",
			},
		},
		{
			name: "failing coverage",
			comparison: &CoverageComparison{
				PRCoverage: CoverageData{Percentage: 45.0},
				Difference: -5.0,
			},
			target: 70.0,
			expectedContains: []string{
				"45.00%",
				"(-5.00%)",
				"üìâ",
				"‚ùå",
				"FAILING",
			},
		},
		{
			name: "warning coverage",
			comparison: &CoverageComparison{
				PRCoverage: CoverageData{Percentage: 60.0},
				Difference: 1.0,
			},
			target: 70.0,
			expectedContains: []string{
				"60.00%",
				"(+1.00%)",
				"‚ö†Ô∏è",
				"WARNING",
			},
		},
		{
			name: "stable coverage",
			comparison: &CoverageComparison{
				PRCoverage: CoverageData{Percentage: 80.0},
				Difference: 0.2,
			},
			target: 70.0,
			expectedContains: []string{
				"80.00%",
				"(no change)",
				"üìä",
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			config := DefaultCommentTemplateConfig()
			config.CoverageTarget = tt.target
			generator := NewCommentTemplateGenerator(config)

			header := generator.generateHeader(tt.comparison)

			for _, expected := range tt.expectedContains {
				if !strings.Contains(header, expected) {
					t.Errorf("expected header to contain '%s', but it didn't.\nHeader: %s", expected, header)
				}
			}
		})
	}
}

func TestCommentTemplateGenerator_GenerateCoverageChanges(t *testing.T) {
	config := DefaultCommentTemplateConfig()
	generator := NewCommentTemplateGenerator(config)

	comparison := &CoverageComparison{
		PRCoverage: CoverageData{
			Percentage:        78.5,
			CoveredStatements: 785,
		},
		BaseCoverage: CoverageData{
			Percentage:        75.0,
			CoveredStatements: 675,
		},
		Difference: 3.5,
	}

	changes := generator.generateCoverageChanges(comparison)

	expectedContains := []string{
		"### Coverage Changes",
		"| Metric | Base | Current | Change | Status |",
		"75.00%",
		"78.50%",
		"+3.50%",
		"785",
		"675",
	}

	for _, expected := range expectedContains {
		if !strings.Contains(changes, expected) {
			t.Errorf("expected changes to contain '%s', but it didn't.\nChanges: %s", expected, changes)
		}
	}
}

func TestCommentTemplateGenerator_GeneratePackageDetails(t *testing.T) {
	config := DefaultCommentTemplateConfig()
	generator := NewCommentTemplateGenerator(config)

	comparison := &CoverageComparison{
		FileChanges: []FileChange{
			{
				Filename:      "pkg/main",
				PRCoverage:    85.0,
				Difference:    5.0,
				IsSignificant: true,
			},
			{
				Filename:      "pkg/utils",
				PRCoverage:    90.0,
				Difference:    -1.0,
				IsSignificant: false,
			},
		},
	}

	details := generator.generatePackageDetails(comparison)

	expectedContains := []string{
		"<details>",
		"üì¶ Package Coverage Details",
		"| Package | Coverage | Change |",
		"main",
		"utils",
		"85.0%",
		"90.0%",
		"+5.0%",
		"~", // For small change
		"</details>",
	}

	for _, expected := range expectedContains {
		if !strings.Contains(details, expected) {
			t.Errorf("expected details to contain '%s', but it didn't.\nDetails: %s", expected, details)
		}
	}
}

func TestCommentTemplateGenerator_GenerateTrendSection(t *testing.T) {
	config := DefaultCommentTemplateConfig()
	generator := NewCommentTemplateGenerator(config)

	trendHistory := []history.CoverageRecord{
		{Percentage: 70.0, Timestamp: time.Now().Add(-2 * time.Hour)},
		{Percentage: 75.0, Timestamp: time.Now().Add(-1 * time.Hour)},
		{Percentage: 80.0, Timestamp: time.Now()},
	}

	trendSection := generator.generateTrendSection(trendHistory)

	expectedContains := []string{
		"<details>",
		"üìà Coverage Trend",
		"```",
		"**Sparkline:**",
		"</details>",
	}

	for _, expected := range expectedContains {
		if !strings.Contains(trendSection, expected) {
			t.Errorf("expected trend section to contain '%s', but it didn't.\nTrend: %s", expected, trendSection)
		}
	}
}

func TestCommentTemplateGenerator_GenerateFileDetails(t *testing.T) {
	config := DefaultCommentTemplateConfig()
	config.ShowFileDetails = true
	generator := NewCommentTemplateGenerator(config)

	comparison := &CoverageComparison{
		FileChanges: []FileChange{
			{
				Filename:      "very/long/path/to/some/file/main.go",
				BaseCoverage:  70.0,
				PRCoverage:    85.0,
				Difference:    15.0,
				IsSignificant: true,
				LinesAdded:    10,
				LinesRemoved:  2,
			},
			{
				Filename:      "utils.go",
				BaseCoverage:  90.0,
				PRCoverage:    88.0,
				Difference:    -2.0,
				IsSignificant: true,
			},
		},
	}

	details := generator.generateFileDetails(comparison)

	expectedContains := []string{
		"<details>",
		"üìÅ File Coverage Changes",
		"| File | Base | Current | Change | Lines |",
		"...main.go", // Truncated filename
		"utils.go",
		"85.0%",
		"88.0%",
		"+15.0%",
		"-2.0%",
		"üü¢",      // Positive change icon
		"üî¥",      // Negative change icon
		"+10/-2", // Line changes
		"</details>",
	}

	for _, expected := range expectedContains {
		if !strings.Contains(details, expected) {
			t.Errorf("expected file details to contain '%s', but it didn't.\nDetails: %s", expected, details)
		}
	}
}

func TestCommentTemplateGenerator_GenerateLinks(t *testing.T) {
	config := DefaultCommentTemplateConfig()
	config.Repository = "owner/repo"
	config.BadgeURL = "https://img.shields.io/badge/coverage-78%25-green"
	generator := NewCommentTemplateGenerator(config)

	comparison := &CoverageComparison{
		PRCoverage: CoverageData{
			Branch: "feature-branch",
		},
	}

	deploymentURL := "https://owner.github.io/repo/coverage/"
	links := generator.generateLinks(deploymentURL, comparison)

	expectedContains := []string{
		"### Links",
		"üìä [**Full Coverage Report**]",
		deploymentURL,
		"üåø [Branch Coverage]",
		"/branch/feature-branch/",
		"üè∑Ô∏è [Coverage Badge]",
		config.BadgeURL,
		"üìú [Coverage History]",
	}

	for _, expected := range expectedContains {
		if !strings.Contains(links, expected) {
			t.Errorf("expected links to contain '%s', but it didn't.\nLinks: %s", expected, links)
		}
	}
}

func TestCommentTemplateGenerator_GenerateCompactComment(t *testing.T) {
	config := DefaultCommentTemplateConfig()
	generator := NewCommentTemplateGenerator(config)

	comparison := &CoverageComparison{
		PRCoverage: CoverageData{
			Percentage: 78.5,
		},
		Difference: 3.5,
	}

	compact := generator.GenerateCompactComment(comparison)

	// Compact mode should be much shorter
	lines := strings.Split(compact, "\n")
	if len(lines) > 10 {
		t.Errorf("expected compact comment to have <= 10 lines, got %d", len(lines))
	}

	// Should still contain essential information
	expectedContains := []string{
		"78.50%",
		"(+3.50%)",
		"Target:",
		"Status:",
	}

	for _, expected := range expectedContains {
		if !strings.Contains(compact, expected) {
			t.Errorf("expected compact comment to contain '%s', but it didn't.\nCompact: %s", expected, compact)
		}
	}
}

func TestCommentTemplateGenerator_GenerateStatusSummary(t *testing.T) {
	config := DefaultCommentTemplateConfig()
	config.CoverageTarget = 70.0
	generator := NewCommentTemplateGenerator(config)

	tests := []struct {
		name       string
		comparison *CoverageComparison
		expectPASS bool
		expectFAIL bool
	}{
		{
			name: "passing coverage",
			comparison: &CoverageComparison{
				PRCoverage: CoverageData{Percentage: 85.0},
				Difference: 3.0,
			},
			expectPASS: true,
		},
		{
			name: "failing coverage",
			comparison: &CoverageComparison{
				PRCoverage: CoverageData{Percentage: 60.0},
				Difference: -2.0,
			},
			expectFAIL: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			summary := generator.GenerateStatusSummary(tt.comparison)

			if tt.expectPASS && !strings.Contains(summary, "PASS") {
				t.Errorf("expected summary to contain PASS.\nSummary: %s", summary)
			}
			if tt.expectFAIL && !strings.Contains(summary, "FAIL") {
				t.Errorf("expected summary to contain FAIL.\nSummary: %s", summary)
			}

			// Should always contain coverage percentage and target
			expectedContains := []string{
				fmt.Sprintf("%.1f%%", tt.comparison.PRCoverage.Percentage),
				"Target: 70.0%",
			}

			for _, expected := range expectedContains {
				if !strings.Contains(summary, expected) {
					t.Errorf("expected summary to contain '%s', but it didn't.\nSummary: %s", expected, summary)
				}
			}
		})
	}
}

func TestCommentTemplateGenerator_NoTrendData(t *testing.T) {
	config := DefaultCommentTemplateConfig()
	generator := NewCommentTemplateGenerator(config)

	comparison := &CoverageComparison{
		PRCoverage: CoverageData{Percentage: 80.0},
		Difference: 0.0,
	}

	// Empty trend history
	comment := generator.GenerateComment(comparison, []history.CoverageRecord{}, "")

	// Should not contain trend section
	if strings.Contains(comment, "üìà Coverage Trend") {
		t.Error("expected comment to NOT contain trend section when no trend data")
	}

	// Should still contain basic information
	if !strings.Contains(comment, "80.00%") {
		t.Error("expected comment to contain current coverage")
	}
}

func TestCommentTemplateGenerator_NoDeploymentURL(t *testing.T) {
	config := DefaultCommentTemplateConfig()
	generator := NewCommentTemplateGenerator(config)

	comparison := &CoverageComparison{
		PRCoverage: CoverageData{Percentage: 80.0},
	}

	comment := generator.GenerateComment(comparison, nil, "")

	// Should not contain links section if no deployment URL
	if strings.Contains(comment, "### Links") {
		t.Error("expected comment to NOT contain links section when no deployment URL")
	}
}

func TestCommentTemplateGenerator_ConfigVariations(t *testing.T) {
	comparison := &CoverageComparison{
		PRCoverage: CoverageData{Percentage: 80.0},
		FileChanges: []FileChange{
			{Filename: "test.go", IsSignificant: true},
		},
	}

	tests := []struct {
		name             string
		configModifier   func(*CommentTemplateConfig)
		shouldContain    []string
		shouldNotContain []string
	}{
		{
			name: "no package details",
			configModifier: func(c *CommentTemplateConfig) {
				c.ShowPackageDetails = false
			},
			shouldNotContain: []string{"üì¶ Package Coverage Details"},
		},
		{
			name: "no branding",
			configModifier: func(c *CommentTemplateConfig) {
				c.ShowBranding = false
			},
			shouldNotContain: []string{"Generated by Go Coverage"},
		},
		{
			name: "compact mode",
			configModifier: func(c *CommentTemplateConfig) {
				c.CompactMode = true
			},
			shouldNotContain: []string{"### Coverage Changes"},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			config := DefaultCommentTemplateConfig()
			tt.configModifier(config)
			generator := NewCommentTemplateGenerator(config)

			comment := generator.GenerateComment(comparison, nil, "")

			for _, should := range tt.shouldContain {
				if !strings.Contains(comment, should) {
					t.Errorf("expected comment to contain '%s'", should)
				}
			}

			for _, shouldNot := range tt.shouldNotContain {
				if strings.Contains(comment, shouldNot) {
					t.Errorf("expected comment to NOT contain '%s'", shouldNot)
				}
			}
		})
	}
}
